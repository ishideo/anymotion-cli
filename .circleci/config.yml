version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5

executors:
  python:
    parameters:
      version:
        type: string
        default: "3.8"
    docker:
      - image: circleci/python:<< parameters.version >>

commands:
  setup_python:
    parameters:
      version:
        type: string
        default: "3.8"
    steps:
      - run:
          name: Show poetry and python version
          command: |
            poetry --version
            poetry run python --version
      - restore_cache:
          keys:
            - deps-<< parameters.version >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install python packages
          command: poetry install
      - save_cache:
          key: deps-<< parameters.version >>-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

jobs:
  setup:
    parameters:
      version:
        type: string
        default: "3.8"
    executor:
      name: python
      version: << parameters.version >>
    steps:
      - checkout
      - setup_python

  test:
    parameters:
      version:
        type: string
        default: "3.8"
      test-type:
        type: enum
        enum: ["unit", "integration"]
        default: unit
    executor:
      name: python
      version: << parameters.version >>
    steps:
      - checkout
      - setup_python:
          version: << parameters.version >>
      - run:
          name: Run << parameters.test-type >> test with pytest
          command: |
            mkdir test-reports
            poetry run pytest tests/<< parameters.test-type >> \
              -v --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports

  measure-coverage:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Run unit test with pytest
          command: poetry run pytest tests/unit --cov --cov-report=xml
      - codecov/upload:
          flags: unit
      - run:
          name: Run integration test with pytest
          command: poetry run pytest tests/integration --cov --cov-report=xml
      - codecov/upload:
          flags: integration

  check-lint:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Lint with flake8
          command: poetry run flake8
      - run:
          name: Lint with black
          command: poetry run black . --check --diff
      - run:
          name: Lint with mypy
          command: poetry run mypy
      - run:
          name: Lint with isort
          command: poetry run isort . --check --diff

  check-security:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Check security with bandit
          command: poetry run bandit -r anymotion_cli

  check-version:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Check version and git tag value
          command: |
            export SDK_VERSION=$(poetry run python -c "from anymotion_sdk import __version__; print(__version__, end='')")
            echo "SDK_VERSION = $SDK_VERSION, CIRCLE_TAG = $CIRCLE_TAG"
            test $CIRCLE_TAG = $SDK_VERSION

  release:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Build
          command: poetry build
      - run:
          name: Distributing packages
          command: poetry publish -u $PYPI_USERNAME -p $PYPI_PASSWORD

workflows:
  workflow:
    jobs:
      - setup:
          matrix:
            parameters:
              version: ["3.6", "3.7", "3.8", "3.9"]
          filters:
            tags:
              only: /.*/
      - test:
          matrix:
            parameters:
              version: ["3.6", "3.7", "3.8", "3.9"]
              test-type: [unit, integration]
          filters:
            tags:
              only: /.*/
          requires:
            - setup
      - measure-coverage:
          filters:
            tags:
              only: /.*/
          requires:
            - test-unit-3.9
            - test-integration-3.9
      - check-lint:
          filters:
            tags:
              only: /.*/
          requires:
            - setup-3.9
      - check-security:
          filters:
            tags:
              only: /.*/
          requires:
            - setup-3.9
      - check-version:
          filters:
            tags:
              only: /^\d+\.\d+(\.\d+)?$/
            branches:
              ignore: /.*/
          requires:
            - setup-3.9
      - approval-release:
          type: approval
          filters:
            tags:
              only: /^\d+\.\d+(\.\d+)?$/
            branches:
              ignore: /.*/
          requires:
            - test
            - measure-coverage
            - check-lint
            - check-security
            - check-version
      - release:
          filters:
            tags:
              only: /^\d+\.\d+(\.\d+)?$/
            branches:
              ignore: /.*/
          requires:
            - approval-release
