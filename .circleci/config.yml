version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
  aws-cli: circleci/aws-cli@0.1.19

executors:
  python:
    parameters:
      version:
        type: string
        default: "3.8"
    docker:
      - image: circleci/python:<< parameters.version >>

commands:
  setup_python:
    parameters:
      version:
        type: string
        default: "3.8"
    steps:
      - restore_cache:
          keys:
            - deps-<< parameters.version >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install python packages
          command: poetry install
      - save_cache:
          key: deps-<< parameters.version >>-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

jobs:
  setup-py38:
    executor:
      name: python
    steps:
      - checkout
      - setup_python

  test:
    parameters:
      version:
        type: string
        default: "3.8"
      test-type:
        type: enum
        enum: ["unit", "integration"]
        default: unit
    executor:
      name: python
      version: << parameters.version >>
    steps:
      - checkout
      - setup_python:
          version: << parameters.version >>
      - run:
          name: Run << parameters.test-type >> test with pytest
          command: |
            mkdir test-reports
            poetry run pytest tests/<< parameters.test-type >> \
              -v --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports

  measure-coverage:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Run unit test with pytest
          command: poetry run pytest tests/unit --cov --cov-report=xml
      - codecov/upload:
          flags: unittest

  check-lint:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Lint with flake8
          command: poetry run flake8
      - run:
          name: Lint with black
          command: poetry run black . --check
      - run:
          name: Lint with mypy
          command: poetry run mypy
      - run:
          name: Lint with isort
          command: poetry run isort --check-only

  check-security:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Check security with bandit
          command: poetry run bandit -r encore_api_cli -s B303

  release:
    executor:
      name: python
    steps:
      - checkout
      - setup_python
      - run:
          name: Build
          command: poetry build
      - run:
          name: Distributing packages
          command: poetry run s3pypi --bucket pypi.anymotion.jp --dist-path dist --private --force
      - aws-cli/setup
      - run:
          name: Install pandoc
          command: |
            sudo apt update
            sudo apt install pandoc
      - run:
          name: Convert markdown files
          command: |
            pandoc README.md -s --self-contained -t html5 -c .circleci/github-pandoc.css \
              | sed -e "s/CHANGELOG.md/CHANGELOG.html/g" > README.html
            pandoc CHANGELOG.md -s --self-contained -t html5 -c .circleci/github-pandoc.css > CHANGELOG.html
      - run:
          name: Upload html files to S3
          command: |
            aws s3 cp README.html s3://pypi.anymotion.jp/encore-api-cli/README.html
            aws s3 cp CHANGELOG.html s3://pypi.anymotion.jp/encore-api-cli/CHANGELOG.html
      - run:
          name: Notify slack
          command: |
            sed -e "s/<version>/${CIRCLE_TAG}/g" .circleci/slack-message.json > message.json
            curl -X POST --data-urlencode payload@message.json ${SLACK_WEB_HOOK}

workflows:
  workflow:
    jobs:
      - setup-py38:
          filters:
            tags:
              only: /.*/
      - test:
          name: test-py36
          filters:
            tags:
              only: /.*/
          version: "3.6"
      - test:
          name: test-py37
          filters:
            tags:
              only: /.*/
          version: "3.7"
      - test:
          name: py38-unit-test
          filters:
            tags:
              only: /.*/
          requires:
            - setup-py38
      - test:
          name: py38-integration-test
          filters:
            tags:
              only: /.*/
          requires:
            - setup-py38
          test-type: integration
      - measure-coverage:
          filters:
            tags:
              only: /.*/
          requires:
            - py38-unit-test
      - check-lint:
          filters:
            tags:
              only: /.*/
          requires:
            - setup-py38
      - check-security:
          filters:
            tags:
              only: /.*/
          requires:
            - setup-py38
      - approval-release:
          type: approval
          filters:
            tags:
              only: /^\d.*/
            branches:
              ignore: /.*/
          requires:
            - test-py36
            - test-py37
            - py38-integration-test
            - measure-coverage
            - check-lint
            - check-security
      - release:
          filters:
            tags:
              only: /^\d.*/
            branches:
              ignore: /.*/
          requires:
            - approval-release
